
version: 2

models:
  - name: stg_title_basics
    description: "Clean, standardized title catalog with enhanced episode formatting"
    columns:
      - name: tconst
        description: "Unique identifier for the title (IMDb ID)"
        tests:
          - not_null  # CRITICAL - blocks if missing
          - unique    # CRITICAL - blocks if duplicates
      - name: title_type
        description: "Type of title (movie, tvSeries, etc.)"
        tests:
          - not_null  # CRITICAL - needed for business logic
          - accepted_values:
              values: ['short', 'movie', 'tvMovie', 'tvSeries', 'tvEpisode', 'tvMiniSeries', 'tvSpecial', 'tvPilot', 'video', 'videoGame', 'tvShort']
              severity: warn  # WARNING - new types might appear
      - name: primary_title
        description: "Primary title with enhanced episode formatting"
        tests:
          - not_null  # CRITICAL - core business field
      - name: start_year
        description: "Year the title started (validated 1800-2030)"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1800
              max_value: 2030
              where: "start_year IS NOT NULL"
              severity: warn  # WARNING - data quality, not blocking
      - name: runtime_minutes
        description: "Duration in minutes (validated 1-2000)"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 2000
              where: "runtime_minutes IS NOT NULL"
              severity: warn  # WARNING - outliers exist
      - name: primary_genre
        description: "First genre tag"
        # NO TEST - already filtered in SQL, testing would be redundant

  - name: stg_title_ratings
    description: "Clean ratings data with proper numeric types"
    columns:
      - name: tconst
        description: "Unique identifier of the title"
        tests:
          - unique    # CRITICAL - primary key
          - not_null  # CRITICAL - primary key
      - name: average_rating
        description: "Weighted average rating (1.0-10.0)"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1.0
              max_value: 10.0
              where: "average_rating IS NOT NULL"
              severity: warn  # WARNING - data anomalies possible
      - name: num_votes
        description: "Number of votes for the rating"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 10000000
              where: "num_votes IS NOT NULL"
              severity: warn  # WARNING - viral content might exceed

  - name: stg_name_basics
    description: "Clean person catalog with calculated fields"
    columns:
      - name: nconst
        description: "Unique identifier for the person"
        tests:
          - unique    # CRITICAL - primary key
          - not_null  # CRITICAL - primary key
      - name: primary_name
        description: "Primary name of the person"
        tests:
          - not_null  # CRITICAL - core business field
      - name: birth_year
        description: "Year of birth (validated range)"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1800
              max_value: 2025
              where: "birth_year IS NOT NULL"
              severity: warn  # WARNING - historical records vary

  - name: stg_title_principals
    description: "Cast and crew information with standardized roles"
    columns:
      - name: tconst
        description: "Unique identifier for the title"
        tests:
          - not_null  # CRITICAL - needed for joins
      - name: ordering
        description: "Position in credits (1 = most prominent)"
        tests:
          - not_null  # CRITICAL - needed for ranking
      - name: nconst
        description: "Unique identifier for the person"
        tests:
          - not_null  # CRITICAL - needed for joins
      - name: category
        description: "Original job category from IMDb"
        tests:
          - not_null  # CRITICAL - core business logic
      - name: role_category
        description: "Standardized role category for analysis"
        tests:
          - accepted_values:
              values: ['actor', 'director', 'writer', 'producer', 'cinematographer', 'composer', 'editor', 'self', 'other']
              severity: warn  # WARNING - new roles might emerge
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - tconst
            - ordering  # CRITICAL - composite primary key

  - name: stg_title_crew_directors
    description: "Normalized directors by title"
    columns:
      - name: tconst
        description: "Unique identifier for the title"
        tests:
          - not_null  # CRITICAL - needed for joins
      - name: director_nconst
        description: "Unique identifier for the director"
        tests:
          - not_null  # CRITICAL - needed for joins
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - tconst
            - director_nconst  # CRITICAL - business rule

  - name: stg_title_crew_writers
    description: "Normalized writers by title"
    columns:
      - name: tconst
        description: "Unique identifier for the title"
        tests:
          - not_null  # CRITICAL
      - name: writer_nconst
        description: "Unique identifier for the writer"
        tests:
          - not_null  # CRITICAL
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - tconst
            - writer_nconst  # CRITICAL

  - name: stg_title_episode
    description: "TV episode relationships"
    columns:
      - name: tconst
        description: "Unique identifier of the episode"
        tests:
          - unique    # CRITICAL - primary key
          - not_null  # CRITICAL - primary key
      - name: parentTconst
        description: "Unique identifier of the parent series"
        tests:
          - not_null  # CRITICAL - needed for hierarchy
      - name: season_number
        description: "Season number of the episode"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 300
              where: "season_number IS NOT NULL"
              severity: warn  # WARNING - long-running shows exist
      - name: episode_number
        description: "Episode number within season"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 50000
              where: "episode_number IS NOT NULL"
              severity: warn  # WARNING - special numbering exists